app稳定性测试
 monkey压力测试
  命令公式 ：monkey -p 包名 执行事件 --throttle 间隔时间ms -v（日志等级） -s(随机时序)1  执行次数   1>f:\log1.txt 2>&1
  获取APP包名 adb shell am monitor   打开app 就会显示包名 
  adb shell monkey -p com.pep.diandu --ignore-crashes --ignore-timeouts --ignore-security-exceptions --ignore-native-crashes --monitor-native-crashes -v -v -v -s 0602 1000 1>F:\worklog\monkeylog\53applog.txt 2>&1
    事件排序： --pct-touch 70 触摸事件百分比70       --pct-motion 5 手势事件百分比70        --pct-trackball 5 轨迹球事件百分比10
              --pct-pinchzoom 2 缩放事件百分比2       --pct-rotation 0 屏幕旋转事件百分比0      --pct-nav 0 基本导航事件百分比0
              --pct-majornav 5 主要导航事件百分比5       --pct-syskeys 5 系统事件百分比 5
              --pct-appswitch 2 Activity启动事件百分比2       --pct-flip  2 键盘翻转事件百分比     --pct-anyevent 2 其他事件百分比            
    忽略事件：--ignore-crashes 忽略crash       --ignore-timeouts 忽略timeouts        --ignore-security-exceptions 忽略权限错误     --ignore-native-crashes 忽略本地应用程序发生崩溃         -monitor-native-crashes  Android系统原生代码中的监视和报告崩溃
    日志输出： > f:222.log 2>&1 标准错误和标准输出都输出到222.log日志中
    输出日志：1 标准输出  2 标准错误输出  & 后台运行 > 导出的日志会覆盖原来日志  > > 追加到源文件末尾
    日志分析：a、找到monkey里哪个地方出错 查看Monkey执行的是哪一个Activity，在switch后面找，两个swtich之间如果出现了崩溃或其他异常，可以在该Activity中查找问题的所在。
              b、查看Monkey里面出错前的一些事件动作，手动执行该动作.Sleeping for XX milliseconds这是执行Monkey测试时，throttle设定的间隔时间，每出现一次，就代表一个事件, Sending XX 就是代表一个操作，如下图的两个操作 应该就是一个点击事件。
               c、若以上步骤还不能找出，则可以使用之前一样的seek再执行monkey命令一遍，便于复现.   
    测试结果分析：
           a、程序无响应，ANR问题：在日志中搜索“ANR”
           b、崩溃问题：在日志中搜索“CRASH”
           c、其他问题:在日志中搜索”Exception”         
            算术异常类：ArithmeticExecption
            空指针异常类：NullPointerException
            类型强制转换异常：ClassCastException
            数组负下标异常：NegativeArrayException
            数组下标越界异常：ArrayIndexOutOfBoundsException
            违背安全原则异常：SecturityException
            文件已结束异常：EOFException
            文件未找到异常：FileNotFoundException
            字符串转换为数字异常：NumberFormatException
            操作数据库异常：SQLException
            输入输出异常：IOException
            违法访问错误：IllegalAccessError
            内存不足错误：OutOfMemoryError
            堆栈溢出错误：StackOverflowError   
              
              
              
app性能测试adb命令方式
 基本步骤：
    adb命令实现性能测试
    连接手机 adb connect 127.0.0.1:62001   
    
 冷启动测试   
    打开待测程序  命令获取Activity ： adb shell dumpsys window windows | findstr “Current”或“adb shell dumpsys window w | findstr \/ | findstr name= “
	冷启动  adb shell am start -W com.tencent.mobileqq/.activity.SplashActivity
       绝对路径，首个 Activity  
       @测试标准：冷启动时间不超过 1.5s，热启动不超过 1s。
       @ am 是 shell 中集成的一个命令，ActivityManager 的简写。  
       @ -W 是指启动完成之后，返回启动耗时。
       @可能存在 app 缓存（提示 Warning: Activity not started, intent has been delivered to currently running top-most instance），
         建议重新打开模拟器后， 直接运行命令
        Status: ok
        Activity: com.tencent.mobileqq/.activity.SplashActivity
        ThisTime: 839       该 Activity 的启动耗时，单位 ms；
        TotalTime: 839      应用自身启动耗时, ThisTime+应用application等资源启动时间；
        WaitTime: 916       系统启动应用耗时, TotalTime+系统资源启动时间。
        热启动 返回app 在执行命令就是热启动时间
       
 内存占用测试       
    主要测试点
     空闲状态：切换至后台或者启动后不做任何操作，消耗内存最少。
     中强度状态：时间偏长的操作应用。
     高强度状态：高强度使用应用，可以跑 monkey 来测试（通常用来测试内存泄漏）

    测试方法     
     adb shell dumpsys meminfo  + 包名   
     adb shell dumpsys meminfo com.tencent.mobileqq
       ** MEMINFO in pid 2832 [com.tencent.mobileqq] **
                        Pss   Private  Private  Swapped    Heap     Heap     Heap
                      Total    Dirty    Clean    Dirty     Size    Alloc     Free
                      ------   ------   ------   ------   ------   ------   ------
        Native Heap        0        0        0        0    57344    47144    10199
        Dalvik Heap    50938    50756        0        0    56774    44670    12104
       指标一：Native heap alloc、Dalvik heap alloc。若这两个值一直增长，说明可能出现内存泄漏
       指标二：PSS TOTAL App 实际占用的内存大小。
           退出某个页面后，内存是否有回落
            如果没有及时回落，且程序自动 GC（Garbage Collection，垃圾回收）或 者手动 GC，那便可确认有问题。
           进行某个操作后，内存是否增长过快。
            如果增长过快，也有可能存在风险，需重复操作确认。
       
 CPU 繁忙测试  
    主要测试点 
       在空闲时间(切换至后台)的消耗，基本没大应用使用 CPU
       在运行一些应用的情况下，CPU 已占 50%的情况下，观察应用程序占用 CPU 的情 况
       在高负荷的情况下看 CPU 的表现（CPU 占用应是在 80%以上）
    
    具体场景  
        应用空闲状态运行监测 CPU 占用率
         应用按 Home 键退到后台，不再占用系统的状态（通常是灭屏半分钟后）
         CPU 占用率=0%
        应用中等规格运行监测 CPU 占用率
         模拟用户最常见的使用场景
         CPU 占用率≤30%
        应用满规格长时间正常运行监测 CPU 占用率
         应用正常运行，打开应用进行基本操作
         CPU 占用率≤50%
    
    测试方法   
     adb shell top -m -s | findstr +包名
       显示列的名字一次为：PID  USER PR  NI VIRT RES SHR S[%CPU] %MEM  TIME+  ARGS
       
 FPS流畅度测试
    测试方法一
     1.手机设置 关于手机--版本号点7次进入开发者模式--进入开发者选项--监控栏中的 GPU呈现模式分析（小米是HWUI）--In adb shell dumpsys gfxinfo
     2.打开要测试的app
     3.cmd中输入adb命令(安卓6以上) ：   adb shell dumpsys gfxinfo 包名  >fps.txt（在连接手机后，输入命令：adb shell am monitor，然后打开应用，即可看到当前打开应用的包名）
     4.Graphics info for pid 1331 [com.tencent.mm]：表明当前 dump 的为 com.tencent.mm 的帧信息，pid 为 1331。    
       Total frames rendered: 2218：本次 dump 搜集了 2218 帧的信息。
       Janky frames: 26 (1.17%)：帧中有 26 帧的耗时超过了 16ms，卡顿概率为 1.17%。 
       Number Missed Vsync: 3：垂直同步失败的帧
       Number High input latency:2213：处理 input 时间超时的帧
       Number Slow UI thread: 1：因为 ui 线程导致 slow 的帧
       Number Slow bitmap uploads: 0：因为 bitmap 加载 slow 的帧
       Number Slow issue draw commands: 3：因为绘制导致 slow 的帧
     5.抓取的数据处理（住区的数据只是当前打开app的界面帧率）
       Draw: 表示在 Java 中创建显示列表部分中的 OnDraw()方法占用的时间。
       Prepare：表示渲染引擎准备时间，不关注此项。
       Process：表示渲染引擎执行显示列表所花的时间，view 越多，时间就越长。
       Execute：表示把一帧数据发送到屏幕上排版显示实际花费的时间。
       Draw + Process + Execute = 完整显示一帧 ，这个时间要小于 16ms 才能保存每秒 60 帧。
       数据处理;导出或者复制数据到excel中，cmd复制的可以先复制到记事本把空格替换成TEB空，然后在粘贴到excel中就是按列显示了。
       在excl表格中新增一列FPSS（fps时间）计算Draw + Process + Execute三列的和。在添加一行参考线列16S.然后插入折线图，只要超过16s的都是低于60帧率每秒的，都需要优化。
    测试方法二
     1.手机设置 关于手机--版本号点7次进入开发者模式--进入开发者选项--监控栏中的 GPU呈现模式分析（小米是HWUI）--在屏幕显示条形图    
     2. 开启此功能后，随着屏幕刷新，界面上会滚动显示垂直的柱状图来表示每帧画面所 需要渲染的时间，柱状图越高表示花费的渲染时间越长。
       每个直方条代表一帧，每个直方条的高度表示该帧渲染所用的时间（以毫秒为 单位）
       界面中间一根绿色水平线代表 16ms，每一帧的柱状线都在这条绿线以下，才 能避免出现由丢帧引起的卡顿。
       颜色含义（Android 6.0 及更高版本中的竖条区段）百度搜索。
         
 GPU 过度渲染测试
    测试步骤
      1.开启 GPU 过度渲染
       设置--开发者选项--单击调试GPU过度绘制--选择 显示过度绘制区域
      2.打开被测软件
    参数说明
      GPU 过渡渲染不同的颜色代表不同的绘制程度
       原色：无过渡绘制
       蓝色：绘制一次 （理想状态）
       绿色：绘制二次
       浅红：绘制三次 （可以优化）
       深红：绘制四次 （必须优化）
    测试指标  
       控制过渡绘制为 2x
       不允许存在 4x 过渡绘制
       不允许存在面积超过屏幕 1/4 的 3x 过渡绘制
       
GT性能工具的使用
    1.安装腾讯的GTapp
    2.打开GT 选择待测 App、选择测试指标
        AUT：设置被测应用信息
        pss：实际使用的物理内存
        private dirty：私有内存
        jiffies：CPU 时间片，反映进程的 CPU 消耗
        net：整个手机产生的流量
    3.选择监控参数 
        点参数→编辑→拖动需要监控的参数到“已关注的参数”→不点完成
    4.点击插件 添加监控耗电量、流量和流畅度的参数
      点击耗电数据采集 -- 勾选电流，电压，电量，温度。点击开始。
      点击抓包 -- 点击开始（需要root才可以）--点击开始
      点击流畅度调试 -- 点“检测”必须出现 ok，否则点“更改”→检测，提示“select a app first”忽略
    5.返回参数栏选择显示哪些指标，勾选上
    6.AUT界面，点击启动按钮
    7.操作app 
    8.返回参数界面，点击保存。也可点击相应指标查看折线图
    9.导出结果分析 adb -s (-s指定设备执行命令)  设备中文件地址   f:\gt（复制到电脑的哪个位置）
          adb -s 127.0.0.1:62025  pull /storage/emulated/0/GT/GW/com.tencent.mobileqq/8.3.6/0601/gtdesc.csv f:\gt
      在 Excel 中插入散点图（带平滑线）   
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         